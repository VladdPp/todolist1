{"version":3,"sources":["components/header.js","components/addbar.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","AddBar","addItem","event","key","fetch","target","value","then","alert","type","placeholder","onKeyDown","this","Todolist","props","state","items","id","setState","filter","item","find","done","onClick","removeItem","toggleDone","isDone","res","json","map","createItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAGMA,G,kKACJ,WACE,OAAO,yBAAKC,UAAU,UAAf,mB,GAFUC,IAAMC,YAMZH,ICNTI,G,kNACJC,QAAU,SAAAC,GACU,UAAdA,EAAMC,KACRC,MAAM,qCAAD,OAAsCF,EAAMG,OAAOC,QAASC,KAC/DC,MAAM,0C,4CAKZ,WACE,OACE,yBAAKX,UAAU,UACb,2BACEA,UAAU,cACVY,KAAK,OACLC,YAAY,kBACZC,UAAWC,KAAKX,e,GAhBLH,IAAMC,YAuBZC,I,OC2CAa,G,wDAjEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHQ,E,8CAOnB,SAAWC,GACTb,MAAM,qCAAD,OAAsCa,IAAMV,KAC/CK,KAAKM,SAAS,CACZF,MAAOJ,KAAKG,MAAMC,MAAMG,QAAO,SAAAC,GAAI,OAAIA,EAAKH,KAAOA,U,wBAKzD,SAAWA,GACT,IAAID,EAAK,YAAOJ,KAAKG,MAAMC,OACvBI,EAAOJ,EAAMK,MAAK,SAAAD,GAAI,OAAIA,EAAKH,KAAOA,KAC1CG,EAAKE,MAAQF,EAAKE,KAElBlB,MAAM,qCAAD,OAAsCa,EAAtC,YAA4CG,EAAKE,OAAQf,KAC5DK,KAAKM,SAAS,CAAEF,a,oBAIpB,SAAOM,GACL,OAAIA,EACK,OAEA,a,wBAIX,SAAWF,GAAO,IAAD,OACf,OACE,yBAAKvB,UAAU,WAAWM,IAAKiB,EAAKH,GAAIA,GAAIG,EAAKH,IAC/C,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,aAAa0B,QAAS,kBAAM,EAAKC,WAAWJ,EAAKH,MAAhE,KAGCG,EAAKA,MAER,yBAAKvB,UAAU,SAAS0B,QAAS,kBAAM,EAAKE,WAAWL,EAAKH,MACzDL,KAAKc,OAAON,EAAKE,U,+BAM1B,WAAqB,IAAD,OAClBlB,MAAM,+BACHG,MAAK,SAAAoB,GAAG,OAAIA,EAAIC,UAChBrB,MAAK,SAAAqB,GAAI,OAAI,EAAKV,SAAS,CAAEF,MAAOY,EAAKZ,a,oBAG9C,WAAU,IAAD,OACHA,EAAQJ,KAAKG,MAAMC,MACvB,OACE,yBAAKnB,UAAU,YACb,yBAAKA,UAAU,QAAQmB,EAAMa,KAAI,SAAAT,GAAI,OAAI,EAAKU,WAAWV,Y,GA5D1CtB,IAAMC,YCKvBgC,G,kKACJ,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,IAAMC,YAYTgC,ICRKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.9c177f06.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/Header.css\";\n\nclass Header extends React.Component {\n  render() {\n    return <div className=\"Header\"> TODO List </div>;\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./styles/Addbar.css\";\n\nclass AddBar extends React.Component {\n  addItem = event => {\n    if (event.key === \"Enter\") {\n      fetch(`http://localhost:8081/item/create/${event.target.value}`).then(\n        alert(\"Bug: Reload The Page To View Changes\")\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"AddBar\">\n        <input\n          className=\"AddBar-Text\"\n          type=\"text\"\n          placeholder=\"Enter TODO Item\"\n          onKeyDown={this.addItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddBar;\n","import React from \"react\";\nimport \"./styles/Todolist.css\";\n\nclass Todolist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n    };\n  }\n\n  removeItem(id) {\n    fetch(`http://localhost:8081/item/delete/${id}`).then(\n      this.setState({\n        items: this.state.items.filter(item => item.id !== id),\n      })\n    );\n  }\n\n  toggleDone(id) {\n    let items = [...this.state.items];\n    let item = items.find(item => item.id === id);\n    item.done = !item.done;\n\n    fetch(`http://localhost:8081/item/update/${id}/${item.done}`).then(\n      this.setState({ items })\n    );\n  }\n\n  isDone(done) {\n    if (done) {\n      return \"Done\";\n    } else {\n      return \"Not Done\";\n    }\n  }\n\n  createItem(item) {\n    return (\n      <div className=\"ListItem\" key={item.id} id={item.id}>\n        <div className=\"Title\">\n          <div className=\"RemoveItem\" onClick={() => this.removeItem(item.id)}>\n            X\n          </div>\n          {item.item}\n        </div>\n        <div className=\"Status\" onClick={() => this.toggleDone(item.id)}>\n          {this.isDone(item.done)}\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8081/items\")\n      .then(res => res.json())\n      .then(json => this.setState({ items: json.items }));\n  }\n\n  render() {\n    var items = this.state.items;\n    return (\n      <div className=\"TodoList\">\n        <div className=\"List\">{items.map(item => this.createItem(item))}</div>\n      </div>\n    );\n  }\n}\n\nexport default Todolist;\n","import React from \"react\";\n\nimport Header from \"./components/header\";\nimport AddBar from \"./components/addbar\";\nimport TodoList from \"./components/todolist\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <AddBar />\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}